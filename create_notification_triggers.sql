-- ุฅูุดุงุก triggers ุงูุฅุดุนุงุฑุงุช ุงูุจุฑูุฏูุฉ
-- ุชุงุฑูุฎ ุงูุฅูุดุงุก: 20-09-2025
-- ุงูุบุฑุถ: ุฅูุดุงุก triggers ูุฅูุดุงุก ุงูุฅุดุนุงุฑุงุช ุนูุฏ ุงูุฅุนุฌุงุจ ููุดุงูุฏุฉ ุงููููุงุช

-- ===================================
-- 1. ุฅูุดุงุก ุฏุงูุฉ ุฅูุดุงุก ุงูุฅุดุนุงุฑุงุช
-- ===================================

CREATE OR REPLACE FUNCTION public.create_notification(
    p_user_id UUID,
    p_from_user_id UUID,
    p_type TEXT,
    p_title TEXT,
    p_message TEXT,
    p_action_url TEXT DEFAULT NULL,
    p_action_text TEXT DEFAULT NULL
)
RETURNS UUID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    notification_id UUID;
BEGIN
    INSERT INTO public.notifications (
        user_id,
        from_user_id,
        type,
        title,
        message,
        action_url,
        action_text,
        is_read,
        is_dismissed,
        created_at
    ) VALUES (
        p_user_id,
        p_from_user_id,
        p_type,
        p_title,
        p_message,
        p_action_url,
        p_action_text,
        false,
        false,
        NOW()
    ) RETURNING id INTO notification_id;
    
    RETURN notification_id;
END;
$$;

-- ===================================
-- 2. ุฅูุดุงุก ุฏุงูุฉ ุฅุดุนุงุฑ ุงูุฅุนุฌุงุจุงุช
-- ===================================

CREATE OR REPLACE FUNCTION public.notify_user_like()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    notification_id UUID;
BEGIN
    -- ุงูุชุฃูุฏ ูู ุฃู ุงููุณุชุฎุฏู ูุง ูุนุฌุจ ุจููุณู
    IF NEW.liker_id = NEW.liked_user_id THEN
        RETURN NEW;
    END IF;
    
    -- ุฅูุดุงุก ุฅุดุนุงุฑ ูููุณุชุฎุฏู ุงูุฐู ุชู ุงูุฅุนุฌุงุจ ุจู
    BEGIN
        notification_id := public.create_notification(
            NEW.liked_user_id,
            NEW.liker_id,
            'like',
            'ุฅุนุฌุงุจ ุฌุฏูุฏ!',
            'ุฃุนุฌุจ ุจู ูุณุชุฎุฏู ุฌุฏูุฏ',
            '/profile/' || NEW.liker_id::text,
            'ุนุฑุถ ุงูููู ุงูุดุฎุตู'
        );
        
        RAISE LOG 'ุชู ุฅูุดุงุก ุฅุดุนุงุฑ ุฅุนุฌุงุจ: % ูููุณุชุฎุฏู: % ูู: %', notification_id, NEW.liked_user_id, NEW.liker_id;
        
    EXCEPTION WHEN OTHERS THEN
        RAISE LOG 'ุฎุทุฃ ูู ุฅูุดุงุก ุฅุดุนุงุฑ ุงูุฅุนุฌุงุจ: %', SQLERRM;
    END;
    
    RETURN NEW;
END;
$$;

-- ===================================
-- 3. ุฅูุดุงุก ุฏุงูุฉ ุฅุดุนุงุฑ ูุดุงูุฏุฉ ุงูููู ุงูุดุฎุตู
-- ===================================

CREATE OR REPLACE FUNCTION public.notify_profile_view()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    notification_id UUID;
BEGIN
    -- ุงูุชุฃูุฏ ูู ุฃู ุงููุณุชุฎุฏู ูุง ูุดุงูุฏ ูููู ุงูุดุฎุตู
    IF NEW.viewer_id = NEW.viewed_user_id THEN
        RETURN NEW;
    END IF;
    
    -- ุฅูุดุงุก ุฅุดุนุงุฑ ูููุณุชุฎุฏู ุงูุฐู ุชู ูุดุงูุฏุฉ ูููู
    BEGIN
        notification_id := public.create_notification(
            NEW.viewed_user_id,
            NEW.viewer_id,
            'profile_view',
            'ูุดุงูุฏุฉ ุฌุฏูุฏุฉ!',
            'ุดุงูุฏ ูููู ุงูุดุฎุตู ูุณุชุฎุฏู ุฌุฏูุฏ',
            '/profile/' || NEW.viewer_id::text,
            'ุนุฑุถ ุงูููู ุงูุดุฎุตู'
        );
        
        RAISE LOG 'ุชู ุฅูุดุงุก ุฅุดุนุงุฑ ูุดุงูุฏุฉ: % ูููุณุชุฎุฏู: % ูู: %', notification_id, NEW.viewed_user_id, NEW.viewer_id;
        
    EXCEPTION WHEN OTHERS THEN
        RAISE LOG 'ุฎุทุฃ ูู ุฅูุดุงุก ุฅุดุนุงุฑ ุงููุดุงูุฏุฉ: %', SQLERRM;
    END;
    
    RETURN NEW;
END;
$$;

-- ===================================
-- 4. ุญุฐู ุงูู triggers ุงููุฏููุฉ ุฅุฐุง ูุงูุช ููุฌูุฏุฉ
-- ===================================

DROP TRIGGER IF EXISTS trigger_notify_user_like ON public.user_likes;
DROP TRIGGER IF EXISTS trigger_notify_profile_view ON public.profile_views;

-- ===================================
-- 5. ุฅูุดุงุก ุงูู triggers ุงูุฌุฏูุฏุฉ
-- ===================================

-- ุฅูุดุงุก trigger ููุฅุนุฌุงุจุงุช
CREATE TRIGGER trigger_notify_user_like
    AFTER INSERT ON public.user_likes
    FOR EACH ROW
    EXECUTE FUNCTION public.notify_user_like();

-- ุฅูุดุงุก trigger ููุดุงูุฏุฉ ุงููููุงุช
CREATE TRIGGER trigger_notify_profile_view
    AFTER INSERT ON public.profile_views
    FOR EACH ROW
    EXECUTE FUNCTION public.notify_profile_view();

-- ===================================
-- 6. ุฅุนุทุงุก ุงูุตูุงุญูุงุช
-- ===================================

GRANT EXECUTE ON FUNCTION public.create_notification TO authenticated;
GRANT EXECUTE ON FUNCTION public.notify_user_like TO authenticated;
GRANT EXECUTE ON FUNCTION public.notify_profile_view TO authenticated;

-- ===================================
-- 7. ุงุฎุชุจุงุฑ ุงููุธุงู
-- ===================================

-- ุงุฎุชุจุงุฑ ุฅูุดุงุก ุฅุดุนุงุฑ ูุฏูู
DO $$
DECLARE
    test_notification_id UUID;
    test_user_id UUID;
BEGIN
    -- ุงูุญุตูู ุนูู ูุนุฑู ูุณุชุฎุฏู ููุฌูุฏ
    SELECT id INTO test_user_id FROM public.users LIMIT 1;
    
    IF test_user_id IS NOT NULL THEN
        -- ุฅูุดุงุก ุฅุดุนุงุฑ ุชุฌุฑูุจู
        test_notification_id := public.create_notification(
            test_user_id,
            test_user_id,
            'system',
            'ุงุฎุชุจุงุฑ ุงููุธุงู',
            'ุชู ุฅูุดุงุก triggers ุงูุฅุดุนุงุฑุงุช ุจูุฌุงุญ',
            '/',
            'ุนุฑุถ ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ'
        );
        
        RAISE LOG 'ุชู ุฅูุดุงุก ุฅุดุนุงุฑ ุชุฌุฑูุจู: %', test_notification_id;
    END IF;
END;
$$;

-- ===================================
-- 8. ุฑุณุงูุฉ ุงููุฌุงุญ
-- ===================================

DO $$
BEGIN
    RAISE LOG 'โ ุชู ุฅูุดุงุก triggers ุงูุฅุดุนุงุฑุงุช ุงูุจุฑูุฏูุฉ ุจูุฌุงุญ!';
    RAISE LOG '๐ง ุงููุธุงู ุฌุงูุฒ ูุฅุฑุณุงู ุงูุฅุดุนุงุฑุงุช ุงูุจุฑูุฏูุฉ ุนูุฏ ุงูุฅุนุฌุงุจ ููุดุงูุฏุฉ ุงููููุงุช';
END;
$$;
